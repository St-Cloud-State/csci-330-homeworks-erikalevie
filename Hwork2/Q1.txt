Script started on 2025-02-05 02:34:04+00:00 [TERM="xterm-256color" TTY="/dev/pts/1" COLUMNS="163" LINES="16"]
[0;32m@erikalevie [0mâžœ [1;34m/workspaces/csci-330-homeworks-erikalevie/Homework2 [0;36m([1;31mmain[0;36m) [0m$ sbcl
This is SBCL 1.4.3, an implementation of ANSI Common Lisp.
More information about SBCL is available at <http://www.sbcl.org/>.

SBCL is free software, provided as is, with absolutely no warranty.
It is mostly in the public domain; some portions are provided under
BSD-style licenses.  See the CREDITS and COPYING files in the
distribution for more information.
* (NOT (EQUAL 3 (ABS -3)))

NIL
* (/ (+ 8 12) 2)

10
* (+ (* 3 3) (* 4 4))

25
* (defun miles-per-gallon (initial-odometer-reading final-odometer-reading gallons-consumed)   (/ (- final-odometer-reading initial-odometer-reading) gallons-consumed))

MILES-PER-GALLON
* (miles-per-gallon 100 300 10)

20
* (third ' (the quick brown fox))

BROWN
* ; added a quote to fix error
(third ' (the quick brown fox))

BROWN
* ; THIRDâ€™s argument must be quoted.
(third ' (the quick brown fox))

BROWN
* ;Symbols used as data must be quoted.
(list 2 'and 2 'is 4)

(2 AND 2 IS 4)
* ;No quote before LENGTH.
(+ 1 (length (list t t t t)))

5
* ;Lists used as data must be quoted.
(cons 'patrick '(seymour marvin))

(PATRICK SEYMOUR MARVIN)
* ;Symbols used as data must be quoted.
(cons 'patrick (list 'seymour 'marvin))

(PATRICK SEYMOUR MARVIN)
* (defun mystery (x) (list (second x) (first x)))

MYSTERY
* (mystery '(dancing bear))

(BEAR DANCING)
* (mystery 'dancing â€™bear)

debugger invoked on a UNBOUND-VARIABLE in thread
#<THREAD "main thread" RUNNING {9461061}>:
  The variable â€™BEAR is unbound.

Type HELP for debugger help, or (SB-EXT:EXIT) to exit from SBCL.

restarts (invokable by number or by possibly-abbreviated name):
  0: [ABORT] Exit debugger, returning to top level.

(SB-INT:SIMPLE-EVAL-IN-LEXENV â€™BEAR #<NULL-LEXENV>)
0] (mystery 'dancing 'bear)
; in: MYSTERY 'DANCING
;     (MYSTERY 'DANCING 'BEAR)
; 
; caught STYLE-WARNING:
;   The function was called with two arguments, but wants exactly one.
; 
; compilation unit finished
;   caught 1 STYLE-WARNING condition

debugger invoked on a SB-INT:SIMPLE-PROGRAM-ERROR in thread
#<THREAD "main thread" RUNNING {9461061}>:
  invalid number of arguments: 2

Type HELP for debugger help, or (SB-EXT:EXIT) to exit from SBCL.

restarts (invokable by number or by possibly-abbreviated name):
  0: [ABORT] Reduce debugger level (to debug level 1).
  1:         Exit debugger, returning to top level.

(MYSTERY DANCING BEAR) [external]
   source: (SB-INT:NAMED-LAMBDA MYSTERY
               (X)
             (BLOCK MYSTERY (LIST (SECOND X) (FIRST X))))
0[2] (defun mystery (x) (list (second x) (first x)))

WARNING: redefining COMMON-LISP-USER::MYSTERY in DEFUN
MYSTERY
0[2] (mystery '(zowie))

(NIL ZOWIE)
0[2] (mystery (list 'first 'second))

(SECOND FIRST)
0[2] ;Variables shouldnâ€™t be quoted: (defun speak (x y) (list â€™all â€™x â€™is â€™y))
;A function canâ€™t have two argument lists: (defun speak (x) (y) (list â€™all x â€™is y))
;Donâ€™t parenthesize variables in the argument list; donâ€™t quote variables; do quote ALL and IS: (defun speak ((x) (y)) (list all â€™x is â€™y))
(defun speak (x y) (list 'all x 'is y))

SPEAK
0[2] (list 'cons t nil)

(CONS T NIL)
0[2] (eval (list 'cons t nil))

(T)
0[2] (eval (eval (list 'cons t nil)))
; in: T
;     (T)
; 
; caught WARNING:
;   The function T is undefined, and its name is reserved by ANSI CL so that even
;   if it were defined later, the code doing so would not be portable.
; 
; compilation unit finished
;   Undefined function:
;     T
;   caught 1 WARNING condition

debugger invoked on a UNDEFINED-FUNCTION in thread
#<THREAD "main thread" RUNNING {9461061}>:
  The function COMMON-LISP:T is undefined.

Type HELP for debugger help, or (SB-EXT:EXIT) to exit from SBCL.

restarts (invokable by number or by possibly-abbreviated name):
  0: [ABORT] Reduce debugger level (to debug level 2).
  1:         Reduce debugger level (to debug level 1).
  2:         Exit debugger, returning to top level.

("undefined function")
0[3] (apply #'cons ' (t nil))
; No debug variables for current frame: using EVAL instead of EVAL-IN-FRAME.
(T)
0[3] (eval nil)
; No debug variables for current frame: using EVAL instead of EVAL-IN-FRAME.
NIL
0[3] (list 'eval nil)
; No debug variables for current frame: using EVAL instead of EVAL-IN-FRAME.
(EVAL NIL)
0[3] (eval (list 'eval nil))
; No debug variables for current frame: using EVAL instead of EVAL-IN-FRAME.
NIL
0[3] exit    (quit)
; No debug variables for current frame: using EVAL instead of EVAL-IN-FRAME.
[0;32m@erikalevie [0mâžœ [1;34m/workspaces/csci-330-homeworks-erikalevie/Homework2 [0;36m([1;31mmain[0;36m) [0m$  
exit
exit

Script done on 2025-02-05 02:40:31+00:00 [COMMAND_EXIT_CODE="0"]
 
